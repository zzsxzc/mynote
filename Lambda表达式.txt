1、使用Lambda表达式,实际就是创建出该接口的实例对象。
	Lambda表达式的一般模式：
		()->{}
		()内为参数，{}内为方法实现
	使用Lambda来创建线程
		new Thread(()->System.out.println("Hello World!"));
2、使用Lambda表达式需要函数式编程接口
3、接口的实例化对象准确地说应该是接口的实现类的实例化对象
4、使用Lambda表达式时，要记住的就两点
	1、Lambda返回的是接口的实例对象
	2、有没有参数、参数有多少个、需不需要有返回值、返回值的类型是什么--->选择合适的函数式接口
5、方法引用
	如果函数式接口的实现恰好可以通过调用一个方法来实现，那么可以使用方法引用
	以下两种写法是等效的
	普通写法：
		Consumer<String> consumer=s->System.out.println(s);
		consumer.accept("Java3y");
	利用方法引用的写法:
		Consumer<String> consumer=System.out::println;
		consumer.accept("Java3y");
6、总结
	Lambda虽然代码看起来简洁，但是如果复杂的话还是比较难看明白。
	在学习Lambda的时候，首先我们需要知道有哪些常用函数式编程接口，这些函数式编程接口有什么区别(参数个数、返回值类型)
	Lambda表达式返回的是接口对象实例，如果函数式接口的实现恰好可以通过调用一个方法来实现，那么可以使用方法引用来替代Lambda表达式。
